{"ast":null,"code":"var _s = $RefreshSig$();\nexport {};\nimport { useHistory } from 'react-router-dom';\nconst nameInput = document.querySelector(\"#name\");\nconst emailInput = document.querySelector(\"#email\");\nconst messageInput = document.querySelector(\"#message\");\nconst success = document.querySelector(\"#success\");\nconst error = document.querySelectorAll(\".error\");\nexport function validateForm() {\n  _s();\n  const history = useHistory();\n  clearMessage();\n  let errorMessage = false;\n  if (nameInput !== null) {\n    if (nameInput.value.length < 1) {\n      error[0].textContent = \"\\u0021 Name cannot be blank\";\n      nameInput.classList.add(\"error\");\n      errorMessage = true;\n    }\n  }\n  if (emailInput !== null && !validEmail(emailInput.value)) {\n    const emailError = error[1]; // Cast error[1] to HTMLElement\n    emailError.textContent = \"\\u0021 Invalid Email Address\";\n    emailInput.classList.add(\"error\");\n    errorMessage = true;\n  }\n  if (messageInput !== null && messageInput.value.length < 1) {\n    const messageError = error[2]; // Cast error[2] to HTMLElement\n    messageError.textContent = \"\\u0021 Please Enter a Message\";\n    messageInput.classList.add(\"error\");\n    errorMessage = true;\n  }\n  if (!errorMessage) {\n    success.innerText = \"Message Sent\";\n    history.goBack();\n  }\n}\n_s(validateForm, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\nfunction clearMessage() {\n  for (let i = 0; i < error.length; i++) {\n    const errorElement = error[i];\n    errorElement.innerText = \"\";\n  }\n  if (success !== null) {\n    success.innerText = \"\";\n  }\n  if (nameInput !== null) {\n    nameInput.classList.remove(\"error\");\n  }\n  if (emailInput !== null) {\n    emailInput.classList.remove(\"error\");\n  }\n  if (messageInput !== null) {\n    messageInput.classList.remove(\"error\");\n  }\n}\nfunction validEmail(emailInput) {\n  let symbol = /\\S+@\\S+\\.\\S+/;\n  return symbol.test(emailInput);\n}\n\n// Attach event listener for form validation\nconst form = document.querySelector(\"form\");\nif (form) {\n  form.addEventListener(\"submit\", event => {\n    event.preventDefault();\n    validateForm();\n  });\n}","map":{"version":3,"names":["useHistory","nameInput","document","querySelector","emailInput","messageInput","success","error","querySelectorAll","validateForm","_s","history","clearMessage","errorMessage","value","length","textContent","classList","add","validEmail","emailError","messageError","innerText","goBack","i","errorElement","remove","symbol","test","form","addEventListener","event","preventDefault"],"sources":["C:/Users/Medallada/official-portfolio/src/scripts/form.ts"],"sourcesContent":["export {};\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst nameInput = document.querySelector<HTMLInputElement>(\"#name\");\r\nconst emailInput = document.querySelector<HTMLInputElement>(\"#email\");\r\nconst messageInput = document.querySelector<HTMLInputElement>(\"#message\");\r\nconst success = document.querySelector(\"#success\") as HTMLElement;\r\nconst error = document.querySelectorAll(\".error\");\r\n\r\nexport function validateForm(): void {\r\n  const history = useHistory();\r\n  clearMessage();\r\n  let errorMessage = false;\r\n\r\n  if (nameInput !== null) {\r\n    if (nameInput.value.length < 1) {\r\n        error[0].textContent = \"\\u0021 Name cannot be blank\";\r\n        nameInput.classList.add(\"error\");\r\n        errorMessage = true;\r\n    }\r\n}\r\nif (emailInput !== null && !validEmail(emailInput.value)) {\r\n  const emailError = error[1] as HTMLElement; // Cast error[1] to HTMLElement\r\n  emailError.textContent = \"\\u0021 Invalid Email Address\";\r\n  emailInput.classList.add(\"error\");\r\n  errorMessage = true;\r\n}\r\n\r\nif (messageInput !== null && messageInput.value.length < 1) {\r\n  const messageError = error[2] as HTMLElement; // Cast error[2] to HTMLElement\r\n  messageError.textContent = \"\\u0021 Please Enter a Message\";\r\n  messageInput.classList.add(\"error\");\r\n  errorMessage = true;\r\n}\r\n\r\n  if (!errorMessage) {\r\n    success.innerText = \"Message Sent\";\r\n    history.goBack();\r\n  }\r\n}\r\n\r\nfunction clearMessage(): void {\r\n  for (let i = 0; i < error.length; i++) {\r\n    const errorElement = error[i] as HTMLElement;\r\n    errorElement.innerText = \"\";\r\n}\r\n\r\nif (success !== null) {\r\n    success.innerText = \"\";\r\n}\r\n\r\nif (nameInput !== null) {\r\n    nameInput.classList.remove(\"error\");\r\n}\r\n\r\nif (emailInput !== null) {\r\n    emailInput.classList.remove(\"error\");\r\n}\r\n\r\nif (messageInput !== null) {\r\n    messageInput.classList.remove(\"error\");\r\n}\r\n}\r\n\r\nfunction validEmail(emailInput: string): boolean {\r\n  let symbol = /\\S+@\\S+\\.\\S+/;\r\n  return symbol.test(emailInput);\r\n}\r\n\r\n// Attach event listener for form validation\r\nconst form = document.querySelector(\"form\");\r\nif (form) {\r\n  form.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    validateForm();\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}